#pragma once

#include "crypch.h"
#include "Crayon/Core/Base.h"
#include "Crayon/Core/Logger.h"
#include <glad/glad.h>
#include <debugbreak.h>

/* ***** ERROR CATCHING FOR OPENGL FUNCTIONS ***** */

#define ASSERT(func) \
    if (!(func))     \
        debug_break();

/// @brief Clears OpenGL errors
static void GLClearError()
{
    while (glGetError() != GL_NO_ERROR);
}

/// @brief Logs the error generated by the specified function
/// @param function OpenGL function
/// @param file File in which function has been called
/// @param line Line of the file in which function has been called
/// @return False if function has generated an error, true otherwise.
static bool GLErrorLog(const char *function, const char *file, const int &line)
{
    while (GLenum error = glGetError())
    {
        std::string error_name;

        switch (error)
        {
            case GL_INVALID_ENUM:
                error_name = "GL_INVALID_ENUM";
                break;
            case GL_INVALID_VALUE:
                error_name = "GL_INVALID_VALUE";
                break;
            case GL_INVALID_OPERATION:
                error_name = "GL_INVALID_OPERATION";
                break;
            case GL_OUT_OF_MEMORY:
                error_name = "GL_OUT_OF_MEMORY";
                break;
        }

        spdlog::error("OpenGL Error!\n\tType: {}\n\tGenerated from function {}\n\tAt {}:{}", error_name, function, file,
                      line);
        return false;
    }
    return true;
}

/// Calls the specified OpenGL function and if an error occurs it logs it to console.
#define GLCall(glFunc) \
    GLClearError();    \
    glFunc;            \
    ASSERT(GLErrorLog(#glFunc, __FILE__, __LINE__));